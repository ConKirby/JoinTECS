---
const {
  title = "TECS — Technologists • Engineers • Creators • Scientists",
  description = "TECS is a nationwide competition for Irish secondary school students.",
  pageTitle
} = Astro.props;
---
<html lang="en">
  <head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <title>{pageTitle ? `${pageTitle} — TECS` : title}</title>
    <meta name="description" content={description} />
    <meta property="og:title" content={pageTitle ? `${pageTitle} — TECS` : title} />
    <meta property="og:description" content={description} />
    <meta property="og:image" content="/images/john-collison-hero-image.jpg" />
    <link rel="icon" href="/favicon.svg" />
    <link href="/styles.css" rel="stylesheet" />
  </head>
  <body>
    <!-- Blueprint Grid Background -->
    <div class="blueprint-grid"></div>

    <!-- Theme Toggle -->
    <button class="theme-toggle" id="theme-toggle"><span id="theme-icon">🌙 Dark</span></button>

    <a class="skip" href="#content">Skip to Content</a>

    <header class="site-header">
      <div class="container">
        <div class="header-inner">
          <a href="/" class="brand">TECS</a>
          <button class="hamburger" id="hamburger" aria-label="Toggle navigation">☰</button>
          <nav class="nav" id="nav">
            <a href="#about">About</a>
            <a href="#how">How It Works</a>
            <a href="#prizes">Prizes</a>
            <a href="#faq">FAQ</a>
            <a href="#signup" class="btn">Sign Up</a>
          </nav>
        </div>
      </div>
    </header>

    <main id="content">
      <slot />
    </main>

    <footer class="footer">
      <div class="container">
        <div class="footer-grid">
          <div>
            <h3>TECS</h3>
            <p>Technologists • Engineers<br/>Creators • Scientists</p>
            <p style="margin-top:1rem;">Ireland's nationwide talent search for young innovators.</p>
          </div>
          <div>
            <h4>Quick Links</h4>
            <p><a href="#about">About TECS</a></p>
            <p><a href="#how">How It Works</a></p>
            <p><a href="#prizes">Prizes</a></p>
            <p><a href="#faq">FAQ</a></p>
          </div>
          <div>
            <h4>Contact</h4>
            <p><a href="mailto:info@jointecs.org">info@jointecs.org</a></p>
            <p style="margin-top:1rem;"><strong>Organisers:</strong><br/>ISE at UL<br/>Patch Programme</p>
          </div>
        </div>
        <div class="copyright">© {new Date().getFullYear()} TECS • jointecs.org</div>
      </div>
    </footer>

    <!-- Inline behaviour scripts -->
    <script is:inline>
      // Theme toggle + persistence
      const html = document.documentElement;
      const themeToggle = document.getElementById('theme-toggle');
      const themeIcon = document.getElementById('theme-icon');
      const savedTheme = localStorage.getItem('theme');
      if (savedTheme === 'dark') {
        html.setAttribute('data-theme','dark');
        if (themeIcon) themeIcon.textContent = '☀️ Light';
      }
      themeToggle?.addEventListener('click', () => {
        const dark = html.getAttribute('data-theme') === 'dark';
        if (dark) {
          html.removeAttribute('data-theme');
          localStorage.setItem('theme','light');
          if (themeIcon) themeIcon.textContent = '🌙 Dark';
        } else {
          html.setAttribute('data-theme','dark');
          localStorage.setItem('theme','dark');
          if (themeIcon) themeIcon.textContent = '☀️ Light';
        }
      });

      // Mobile menu
      const nav = document.getElementById('nav');
      const hamburger = document.getElementById('hamburger');
      const closeMenu = () => nav?.classList.remove('mobile-open');
      hamburger?.addEventListener('click', () => nav?.classList.toggle('mobile-open'));
      window.addEventListener('resize', () => { if (window.innerWidth > 768) closeMenu(); });

      // Smooth scroll for internal anchors
      document.addEventListener('click', (e) => {
        const a = e.target.closest('a[href^="#"]');
        if (!a) return;
        const id = a.getAttribute('href');
        const target = id && document.querySelector(id);
        if (target) {
          e.preventDefault();
          closeMenu();
          target.scrollIntoView({behavior:'smooth', block:'start'});
        }
      });

      // Reveal cards on scroll
      const options = { threshold: 0.1, rootMargin: '0px 0px -50px 0px' };
      const obs = new IntersectionObserver((entries)=>entries.forEach(entry=>{
        if (entry.isIntersecting) {
          entry.target.style.opacity='1';
          entry.target.style.transform='translateY(0)';
        }
      }), options);
      document.addEventListener('DOMContentLoaded', ()=>{
        document.querySelectorAll('.card').forEach((card, i)=>{
          card.style.opacity='0';
          card.style.transform='translateY(20px)';
          card.style.transition=`opacity .5s ease ${i*0.1}s, transform .5s ease ${i*0.1}s`;
          obs.observe(card);
        });
      });
    // existing script above...
    // --- ensure marquee tracks are long enough and duplicated for seamless looping ---
    function makeMarqueeSeamless() {
      document.querySelectorAll('.marquee').forEach(marquee => {
        const inner = marquee.querySelector('.marquee-inner');
        if (!inner) return;

        // If we've already duplicated once, skip (idempotent)
        if (inner.dataset.seamless === '1') return;

        // Build a single sequence string from children of first .marquee-track
        const track = inner.querySelector('.marquee-track');
        if (!track) return;

        // Clone the track enough times so total width >= 2 * viewport
        // Start by measuring one copy
        function ensure() {
          // reset duplication flag so measurement is accurate
          inner.dataset.seamless = '0';

          const vw = window.innerWidth;
          // total width of inner content
          let totalWidth = inner.scrollWidth;

          // if inner width already >= 2 * viewport proceed
          // otherwise append clones of the track until it is
          while (totalWidth < vw * 2) {
            const clone = track.cloneNode(true);
            clone.setAttribute('aria-hidden','true');
            inner.appendChild(clone);
            totalWidth = inner.scrollWidth;
            // safety break to avoid infinite loop
            if (inner.childElementCount > 20) break;
          }

          // finally duplicate the whole inner's content once to make exactly the A|A pattern
          // (if content already >= 2*viewport we still want a second identical half for the -50% animation)
          const currentHtml = inner.innerHTML;
          inner.innerHTML = currentHtml + currentHtml;
          inner.dataset.seamless = '1';
        }

        // run once and on next frame to be safe
        ensure();
        // a tiny debounce on resize
        let resizeTimer;
        window.addEventListener('resize', () => {
          clearTimeout(resizeTimer);
          resizeTimer = setTimeout(() => {
            // clear previous duplicates and rebuild from single original track
            // find original track (first one)
            const firstTrack = inner.querySelector('.marquee-track');
            if (!firstTrack) return;
            inner.innerHTML = '';
            inner.appendChild(firstTrack.cloneNode(true));
            ensure();
          }, 150);
        }, { passive: true });
      });
    }

    // call on DOM ready
    document.addEventListener('DOMContentLoaded', () => {
      makeMarqueeSeamless();
    });
    // in case content added later, also attempt run after load
    window.addEventListener('load', () => makeMarqueeSeamless());
    // existing script continues...

    </script>
  </body>
</html>
