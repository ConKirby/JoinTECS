---
// ========================================
// PAST PROJECTS COMPONENT
// ========================================
// Interactive 3D carousel showcasing previous TECS winners and their projects
//
// PURPOSE:
// - Demonstrates the quality and diversity of TECS projects
// - Showcases past winners to inspire new participants
// - Provides social proof and credibility for the competition
// - Features interactive 3D carousel with drag/swipe navigation
//
// USAGE:
// - Used in main page to display past winning projects
// - Automatically randomizes project order on each page load
// - Responsive design: 3D carousel on desktop, simple cards on mobile
// - Includes navigation buttons and drag/swipe support
//
// FEATURES:
// - 3D cylindrical carousel with perspective transforms
// - Drag and swipe navigation support
// - Responsive breakpoints for mobile optimization
// - Project randomised

export interface Props {
  projects?: Array<{
    name: string; // Student name
    age: number; // Student age
    school: string; // School name
    year: number; // Competition year
    award: string; // Award category (Winner, Runner-up, etc.)
    description: string; // Project description
    image: string; // Student profile image URL
    links?: Array<{
      label: string; // Link label (e.g., "GitHub", "Demo", "Website")
      url: string; // Link URL
    }>;
  }>;
}

const {
  projects = [
    {
      name: "Con Kirby",
      age: 18,
      school: "Crescent College Comprehensive",
      year: 2024,
      award: "Overall Winner",
      description: "Developed a real-time piano evaluation system using MIDI, feature analysis, and machine learning. It provided accuracy scoring and detailed performance insights that accelerated learning by identifying mistakes that piano teachers could easily miss.",
      image: "/images/students/Con-Kirby.JPG",
      links: [
      { label: "Portfolio", url: "https://conkirby.com/projects/tecs/" },
      ]
    },
    {
      name: "Donna Mae Quinto",
      age: 17,
      school: "Test School",
      year: 2024,
      award: "Overall Runner-up",
      description: "Plant-based prevention of hyperuricaemia.",
      image: "/images/students/Donna-Mae-Quinto.JPG",
      links: []
    },
    {
      name: "Aditya Joshi",
      age: 18,
      school: "Test School",
      year: 2024,
      award: "6th Year Winner",
      description: "3D-printed Spotify record player controller.",
      image: "/images/students/Aditya-Joshi.JPG",
      links: []
    },
    {
      name: "Rosheen Sharma",
      age: 17,
      school: "Test School",
      year: 2024,
      award: "5th Year Winner",
      description: "Plastic sorting system for efficiency and cost reduction.",
      image: "/images/students/Rosheen-Sharma.JPG",
      links: []
    },
    {
      name: "Samir Bioud",
      age: 16,
      school: "Rice College, Clare",
      year: 2021,
      award: "Overall Winner",
      description: "Compiler for his own programming language, Quinoa.",
      image: "/images/students/Samir-Bioud.JPG",
      links: [
        { label: "GitHub", url: "https://github.com/KronsyC/quinoa" },
      ]
    },
  ]
} = Astro.props;

// Randomize the order of projects
const shuffleArray = (array: any[]) => {
  const shuffled = [...array];
  for (let i = shuffled.length - 1; i > 0; i--) {
    const j = Math.floor(Math.random() * (i + 1));
    [shuffled[i], shuffled[j]] = [shuffled[j], shuffled[i]];
  }
  return shuffled;
};

const randomizedProjects = shuffleArray(projects);
---

<section id="past-projects" class="section past-projects-section">
  <div class="container">
    <h2>Past Projects</h2>
    <p class="muted" style="margin-bottom: 2rem;">See what amazing projects our previous winners have created</p>
    
    <div class="gallery-container">
      <div class="gallery-gradient gallery-gradient-left"></div>
      <div class="gallery-gradient gallery-gradient-right"></div>
      <div class="gallery-content">
        <div class="gallery-track" id="gallery-track">
          {randomizedProjects.map((project, i) => (
            <div class="gallery-item" data-index={i}>
              <div class="project-card">
                <div class="project-header">
                  <div class="project-info">
                    <h3 class="project-name">{project.name}</h3>
                    <div class="project-meta">
                      <span class="project-age">{project.age} years old</span>
                      <span class="project-school">{project.school}</span>
                    </div>
                  </div>
                  <div class="project-image">
                    <img src={project.image} alt={`${project.name} profile picture`} />
                  </div>
                </div>
                <div class="project-award">
                  <span class="award-year">{project.year}</span>
                  <span class="award-type">{project.award}</span>
                </div>
                <div class="project-description">
                  <p>{project.description}</p>
                </div>
                {project.links && project.links.length > 0 && (
                  <div class="project-links">
                    {project.links.map((link) => (
                      <a href={link.url} target="_blank" rel="noopener noreferrer" class="project-link">
                        {link.label}
                      </a>
                    ))}
                  </div>
                )}
              </div>
            </div>
          ))}
        </div>
      </div>
      <div class="gallery-navigation">
        <button class="nav-btn nav-btn-prev" id="prev-btn" aria-label="Previous project">
          <svg width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
            <polyline points="15,18 9,12 15,6"></polyline>
          </svg>
        </button>
        <button class="nav-btn nav-btn-next" id="next-btn" aria-label="Next project">
          <svg width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
            <polyline points="9,18 15,12 9,6"></polyline>
          </svg>
        </button>
      </div>
    </div>
  </div>
</section>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    const galleryTrack = document.getElementById('gallery-track');
    if (!galleryTrack) return;

    const projects = galleryTrack.querySelectorAll('.gallery-item');
    const projectCount = projects.length;
    
    let isScreenSizeSm = window.innerWidth <= 640;
    let currentIndex = 0;
    let isDragging = false;
    let startX = 0;
    let currentX = 0;
    let startTransform = 0;

    /*
     * Calculate responsive dimensions for the 3D carousel
     * Returns different card sizes and spacing based on screen size
     * Mobile: Larger cards (70% width) with tighter spacing
     * Desktop: Smaller cards (50% width) with more spacing
     */
    const getDimensions = () => {
      const containerWidth = galleryTrack.parentElement?.offsetWidth || 800;
      const isMobile = window.innerWidth <= 768;
      
      if (isMobile) {
        const mainCardWidth = containerWidth * 0.7;
        const sideCardWidth = containerWidth * 0.5;
        const spacing = 15;
        const cylinderWidth = containerWidth * 1.4;
        const faceCount = projectCount;
        const radius = cylinderWidth / (2 * Math.PI);
        return { 
          cylinderWidth, 
          faceCount, 
          mainCardWidth, 
          sideCardWidth, 
          spacing, 
          radius,
          isSmallScreen: false
        };
      } else {
        // For larger screens, show 3D carousel
        const mainCardWidth = containerWidth * 0.5;
        const sideCardWidth = containerWidth * 0.3;
        const spacing = 20;
        const cylinderWidth = containerWidth * 1.8;
        const faceCount = projectCount;
        const radius = cylinderWidth / (2 * Math.PI);
        return { 
          cylinderWidth, 
          faceCount, 
          mainCardWidth, 
          sideCardWidth, 
          spacing, 
          radius,
          isSmallScreen: false
        };
      }
    };

    /*
     * Main function that updates the 3D carousel layout
     * Positions all cards in a cylindrical formation with proper rotation
     * Handles visibility, opacity, and z-index for mobile vs desktop
     */
    const updateGallery = (animate = true) => {
      const { cylinderWidth, faceCount, mainCardWidth, sideCardWidth, spacing, radius, isSmallScreen } = getDimensions();
      
      galleryTrack.style.width = `${cylinderWidth}px`;
      
      projects.forEach((project, i) => {
        const projectElement = project as HTMLElement;
        // Show 3D carousel for all screen sizes
        projectElement.style.display = 'flex';
        
        // Calculate continuous rotation for seamless looping
        let rotation = (i * (360 / faceCount)) - (currentIndex * (360 / faceCount));
        
        // Normalize rotation to be between -180 and 180 for smoother transitions
        while (rotation > 180) rotation -= 360;
        while (rotation < -180) rotation += 360;
        
        const isMainCard = Math.abs(rotation) < 15;
        const isSideCard = Math.abs(rotation) < 60;
        const isVisible = Math.abs(rotation) < 90;
        
        if (!isVisible) {
          projectElement.style.display = 'none';
          return;
        }
        
        const cardWidth = isMainCard ? mainCardWidth : sideCardWidth;
        const translateZ = isMainCard ? radius : radius + spacing;
        
        // On mobile, make side cards completely transparent and behind main card
        const isMobile = window.innerWidth <= 768;
        let opacity, zIndex;
        if (isMobile) {
          opacity = isMainCard ? 1 : 0;
          zIndex = isMainCard ? 100 : 1;
        } else {
          opacity = isMainCard ? 1 : (isSideCard ? 0.8 : 0.4);
          zIndex = 'auto';
        }
        
        projectElement.style.width = `${cardWidth}px`;
        projectElement.style.transform = `rotateY(${rotation}deg) translateZ(${translateZ}px)`;
        projectElement.style.opacity = opacity.toString();
        projectElement.style.zIndex = zIndex.toString();
        projectElement.style.transition = animate ? 'all 0.6s cubic-bezier(0.4, 0, 0.2, 1)' : 'none';
      });
      
      // Update button states
      updateButtonStates();
    };

    /*
     * DRAG INTERACTION HANDLERS
     * Handle mouse and touch drag events for carousel navigation
     */
    
    const handleDragStart = (e) => {
      isDragging = true;
      startX = e.type === 'mousedown' ? e.clientX : e.touches[0].clientX;
      startTransform = currentIndex;
      galleryTrack.style.cursor = 'grabbing';
    };

    // Handle drag move
    const handleDragMove = (e) => {
      if (!isDragging) return;
      
      currentX = e.type === 'mousemove' ? e.clientX : e.touches[0].clientX;
      const deltaX = currentX - startX;
      const sensitivity = 0.01;
      const rotationDelta = deltaX * sensitivity;
      
      const { faceCount, mainCardWidth, sideCardWidth, spacing, radius } = getDimensions();
      
      projects.forEach((project, i) => {
        const projectElement = project as HTMLElement;
        let baseRotation = (i * (360 / faceCount)) - (startTransform * (360 / faceCount));
        let currentRotation = baseRotation + rotationDelta;
        
        // Normalize rotation for continuous flow
        while (currentRotation > 180) currentRotation -= 360;
        while (currentRotation < -180) currentRotation += 360;
        
        // Determine visibility and card type during drag
        const isMainCard = Math.abs(currentRotation) < 15;
        const isSideCard = Math.abs(currentRotation) < 60;
        const isVisible = Math.abs(currentRotation) < 90;
        
        if (!isVisible) {
          projectElement.style.display = 'none';
          return;
        }
        
        const cardWidth = isMainCard ? mainCardWidth : sideCardWidth;
        const translateZ = isMainCard ? radius : radius + spacing;
        
        // On mobile, make side cards completely transparent and behind main card
        const isMobile = window.innerWidth <= 768;
        let opacity, zIndex;
        if (isMobile) {
          opacity = isMainCard ? 1 : 0;
          zIndex = isMainCard ? 100 : 1;
        } else {
          opacity = isMainCard ? 1 : (isSideCard ? 0.8 : 0.4);
          zIndex = 'auto';
        }
        
        projectElement.style.display = 'flex';
        projectElement.style.width = `${cardWidth}px`;
        projectElement.style.transform = `rotateY(${currentRotation}deg) translateZ(${translateZ}px)`;
        projectElement.style.opacity = opacity.toString();
        projectElement.style.zIndex = zIndex.toString();
        projectElement.style.transition = 'none';
      });
    };

    // Handle drag end
    const handleDragEnd = () => {
      if (!isDragging) return;
      
      isDragging = false;
      galleryTrack.style.cursor = 'default';
      
      const deltaX = currentX - startX;
      const threshold = 50;
      
      if (Math.abs(deltaX) > threshold) {
        if (deltaX > 0) {
          currentIndex = currentIndex > 0 ? currentIndex - 1 : projectCount - 1;
        } else {
          currentIndex = currentIndex < projectCount - 1 ? currentIndex + 1 : 0;
        }
      }
      
      // Update with smooth animation
      updateGallery(true);
    };

    /*
     * EVENT LISTENERS AND NAVIGATION
     * Set up mouse, touch, and button interactions
     */
    
    galleryTrack.addEventListener('mousedown', handleDragStart);
    document.addEventListener('mousemove', handleDragMove);
    document.addEventListener('mouseup', handleDragEnd);
    
    galleryTrack.addEventListener('touchstart', handleDragStart, { passive: false });
    document.addEventListener('touchmove', handleDragMove, { passive: false });
    document.addEventListener('touchend', handleDragEnd);

    const prevBtn = document.getElementById('prev-btn');
    const nextBtn = document.getElementById('next-btn');

    const handlePrevClick = () => {
      currentIndex = currentIndex > 0 ? currentIndex - 1 : projectCount - 1;
      updateGallery(true);
    };

    const handleNextClick = () => {
      currentIndex = currentIndex < projectCount - 1 ? currentIndex + 1 : 0;
      updateGallery(true);
    };

    if (prevBtn) prevBtn.addEventListener('click', handlePrevClick);
    if (nextBtn) nextBtn.addEventListener('click', handleNextClick);

    // Update button states
    const updateButtonStates = () => {
      if (prevBtn) {
        (prevBtn as HTMLButtonElement).disabled = false;
        prevBtn.style.opacity = '1';
      }
      if (nextBtn) {
        (nextBtn as HTMLButtonElement).disabled = false;
        nextBtn.style.opacity = '1';
      }
    };

    // Handle resize
    const handleResize = () => {
      isScreenSizeSm = window.innerWidth <= 768;
      updateGallery();
    };
    
    window.addEventListener('resize', handleResize);

    updateGallery();
    updateButtonStates();

    return () => {
      galleryTrack.removeEventListener('mousedown', handleDragStart);
      document.removeEventListener('mousemove', handleDragMove);
      document.removeEventListener('mouseup', handleDragEnd);
      galleryTrack.removeEventListener('touchstart', handleDragStart);
      document.removeEventListener('touchmove', handleDragMove);
      document.removeEventListener('touchend', handleDragEnd);
      window.removeEventListener('resize', handleResize);
    };
  });
</script>

<style>
  /*
   * PAST PROJECTS SECTION STYLES
   * 3D Carousel with responsive design for mobile and desktop
   */
  
  .past-projects-section {
    background: var(--bg);
    position: relative;
    overflow: hidden;
  }

  .gallery-container {
    position: relative;
    height: 600px;
    width: 100%;
    overflow: hidden;
  }

  /* Side fade gradients for visual polish */
  .gallery-gradient {
    position: absolute;
    top: 0;
    height: 100%;
    width: 48px;
    z-index: 10;
    pointer-events: none;
  }

  .gallery-gradient-left {
    left: 0;
    background: linear-gradient(to left, rgba(255, 255, 255, 0) 0%, var(--bg) 100%);
  }

  .gallery-gradient-right {
    right: 0;
    background: linear-gradient(to right, rgba(255, 255, 255, 0) 0%, var(--bg) 100%);
  }

  /* Navigation buttons */
  .gallery-navigation {
    position: absolute;
    top: 50%;
    left: 0;
    right: 0;
    transform: translateY(-50%);
    display: flex;
    justify-content: space-between;
    padding: 0 1rem;
    pointer-events: none;
    z-index: 20;
  }

  .nav-btn {
    background: var(--bg);
    border: 1px solid var(--border);
    border-radius: 50%;
    width: 48px;
    height: 48px;
    display: flex;
    align-items: center;
    justify-content: center;
    cursor: pointer;
    transition: all 0.3s ease;
    pointer-events: auto;
    box-shadow: var(--shadow-sm);
  }

  .nav-btn:hover:not(:disabled) {
    background: var(--accent);
    color: white;
    border-color: var(--accent);
    transform: scale(1.1);
  }

  .nav-btn:disabled {
    opacity: 0.5;
    cursor: not-allowed;
  }

  .nav-btn svg {
    width: 20px;
    height: 20px;
  }

  /* 3D carousel container with perspective */
  .gallery-content {
    display: flex;
    height: 100%;
    align-items: center;
    justify-content: center;
    perspective: 1000px;
    transform-style: preserve-3d;
  }

  /* Main carousel track */
  .gallery-track {
    display: flex;
    height: auto;
    min-height: 200px;
    justify-content: center;
    align-items: center;
    cursor: default;
    transform-style: preserve-3d;
    width: 100%;
  }

  /* Individual project cards positioned absolutely for 3D transforms */
  .gallery-item {
    position: absolute;
    display: flex;
    height: fit-content;
    align-items: center;
    justify-content: center;
    padding: 8%;
    backface-visibility: hidden;
  }

  /* Project card styling */
  .project-card {
    background: var(--bg);
    border: 1px solid var(--border);
    border-radius: 15px;
    padding: 1.25rem;
    width: 100%;
    box-shadow: var(--shadow-sm);
    transition: all 0.3s ease;
    height: 320px;
    display: flex;
    flex-direction: column;
  }

  /* Hover effects disabled to prevent side card interference */
  .gallery-item:hover .project-card {
    /* Hover effects disabled for side cards - only main card will have hover */
    /* transform: scale(1.05);
    box-shadow: var(--shadow-lg);
    border-color: var(--accent); */
  }

  .project-header {
    margin-bottom: 1rem;
    display: flex;
    justify-content: space-between;
    align-items: flex-start;
    gap: 1rem;
  }

  .project-info {
    flex: 1;
  }

  .project-name {
    color: var(--accent);
    font-size: 0.9rem;
    font-weight: 700;
    margin: 0 0 0.4rem 0;
  }

  .project-meta {
    display: flex;
    flex-direction: column;
    gap: 0.2rem;
  }

  .project-image {
    width: 85px;
    height: 85px;
    border-radius: 50%;
    overflow: hidden;
    flex-shrink: 0;
    border: 2px solid var(--border);
  }

  .project-image img {
    width: 100%;
    height: 100%;
    object-fit: cover;
  }

  .project-age,
  .project-school {
    color: var(--muted);
    font-size: 0.7rem;
  }

  .project-award {
    display: flex;
    align-items: center;
    gap: 0.4rem;
    margin-bottom: 0.8rem;
    padding: 0.4rem 0.8rem;
    background: var(--accent);
    color: white;
    border-radius: 15px;
    font-weight: 600;
    align-self: flex-start;
  }

  .award-year {
    font-size: 0.7rem;
  }

  .award-type {
    font-size: 0.7rem;
  }

  .project-description {
    flex: 1;
    overflow-y: auto;
  }

  .project-description p {
    color: var(--text);
    line-height: 1.4;
    margin: 0;
    font-size: 0.7rem;
  }

  .project-links {
    margin-top: 0.8rem;
    display: flex;
    flex-wrap: wrap;
    gap: 0.5rem;
  }

  .project-link {
    display: inline-block;
    padding: 0.3rem 0.6rem;
    background: navy;
    color: white;
    text-decoration: none;
    border-radius: 12px;
    font-size: 0.65rem;
    font-weight: 500;
    transition: all 0.2s ease;
  }

  .project-link:hover {
    background: #000080;
    transform: translateY(-1px);
  }

  /* Mobile adjustments */
  @media (max-width: 768px) {
    .gallery-container {
      height: 600px; /* Increased height for taller cards */
      min-height: 600px;
    }
    
    .gallery-content {
      perspective: 1000px; /* Keep 3D perspective for mobile */
      transform-style: preserve-3d;
    }
    
    .gallery-track {
      cursor: grab; /* Enable grab cursor for mobile */
    }
    
    .gallery-item {
      padding: 4%;
      position: absolute; /* Keep absolute positioning for 3D transforms */
      transform-style: preserve-3d;
    }
    
    .project-card {
      height: 420px; /* Increased height for mobile */
      min-height: 420px;
      padding: 1.2rem;
      max-width: 100%;
    }
    
    .project-description {
      overflow-y: auto; /* Keep scroll for longer content */
    }
    
    .project-name {
      font-size: 0.9rem;
    }
    
    .project-description p {
      font-size: 0.9rem; /* Slightly smaller for mobile */
    }

    .project-image {
      width: 65px;
      height: 65px;

    .nav-btn {
      width: 44px;
      height: 44px;
    }

    .nav-btn svg {
      width: 18px;
      height: 18px;
    }
  }

  @media (max-width: 640px) {
    .gallery-container {
      height: 550px; /* Increased height for taller cards */
      min-height: 550px;
    }
    
    .project-card {
      height: 380px; /* Increased height for smaller mobile */
      min-height: 380px;
      padding: 0.8rem;
    }

    .gallery-navigation {
      padding: 0 0.5rem;
    }

    .nav-btn {
      width: 36px;
      height: 36px;
    }

    .nav-btn svg {
      width: 14px;
      height: 14px;
    }

    .project-image {
      width: 65px;
      height: 65px;
    }
  }
</style>
