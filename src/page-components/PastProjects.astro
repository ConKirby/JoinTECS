---
// ========================================
// PAST PROJECTS COMPONENT
// ========================================
// Interactive 3D carousel showcasing previous TECS winners and their projects
//
// PURPOSE:
// - Demonstrates the quality and diversity of TECS projects
// - Showcases past winners to inspire new participants
// - Provides social proof and credibility for the competition
// - Features interactive 3D carousel with drag/swipe navigation
//
// USAGE:
// - Used in main page to display past winning projects
// - Automatically randomizes project order on each page load
// - Responsive design: 3D carousel on desktop, simple cards on mobile
// - Includes navigation buttons and drag/swipe support
//
// FEATURES:
// - 3D cylindrical carousel with perspective transforms
// - Drag and swipe navigation support
// - Responsive breakpoints for mobile optimization
// - Project randomization for variety
// - Accessibility features and keyboard navigation
// - Performance optimized with requestAnimationFrame

export interface Props {
  projects?: Array<{
    name: string; // Student name
    age: number; // Student age
    school: string; // School name
    year: number; // Competition year
    award: string; // Award category (Winner, Runner-up, etc.)
    description: string; // Project description
    image: string; // Student profile image URL
  }>;
}

const {
  projects = [
    {
      name: "Con Kirby",
      age: 18,
      school: "Crescent College Comprehensive",
      year: 2024,
      award: "Winner",
      description: "Developed a real-time piano evaluation system using MIDI, feature analysis, and machine learning. It provided accuracy scoring and detailed performance insights that accelerated learning by identifying mistakes that piano teachers could easily miss.",
      image: "/images/students/Con-Kirby.JPG"
    },
    {
      name: "John Doe",
      age: 16,
      school: "Dublin Technical College",
      year: 2024,
      award: "Runner-up",
      description: "Created a sustainable energy monitoring system for schools using IoT sensors and a custom dashboard. The system tracks electricity usage in real-time and provides recommendations for reducing energy consumption, helping schools save up to 30% on their energy bills.",
      image: "/images/students/Con-Kirby.JPG"
    },
    {
      name: "John Doe",
      age: 18,
      school: "Cork Grammar School",
      year: 2023,
      award: "Winner",
      description: "Built a comprehensive mental health support platform for teenagers, featuring anonymous chat support, mood tracking, and access to professional resources. The platform has helped over 500 students and is now being used by guidance counselors across the region.",
      image: "/images/students/Con-Kirby.JPG"
    },
    {
      name: "John Doe",
      age: 17,
      school: "Galway High School",
      year: 2023,
      award: "Winner",
      description: "Developed a smart waste management system for urban areas using computer vision and machine learning. The system automatically sorts recyclable materials and provides data analytics to help cities optimize their waste collection routes.",
      image: "/images/students/Con-Kirby.JPG"
    },
    {
      name: "John Doe",
      age: 16,
      school: "Limerick Academy",
      year: 2022,
      award: "Winner",
      description: "Created an educational VR experience that takes students on virtual field trips to historical sites and natural wonders. The immersive learning platform has been integrated into the history and geography curriculum at five schools.",
      image: "/images/students/Con-Kirby.JPG "
    },
    {
      name: "John Doe",
      age: 18,
      school: "Waterford Technical Institute",
      year: 2022,
      award: "Technical Excellence",
      description: "Built an autonomous drone system for agricultural monitoring that uses computer vision to detect crop diseases and pest infestations. The system provides farmers with early warning alerts and treatment recommendations, improving crop yields by 25%.",
      image: "/images/students/Con-Kirby.JPG"
    }
  ]
} = Astro.props;

// Randomize the order of projects
const shuffleArray = (array: any[]) => {
  const shuffled = [...array];
  for (let i = shuffled.length - 1; i > 0; i--) {
    const j = Math.floor(Math.random() * (i + 1));
    [shuffled[i], shuffled[j]] = [shuffled[j], shuffled[i]];
  }
  return shuffled;
};

const randomizedProjects = shuffleArray(projects);
---

<section id="past-projects" class="section past-projects-section">
  <div class="container">
    <h2>Past Projects</h2>
    <p class="muted" style="margin-bottom: 2rem;">See what amazing projects our previous winners have created</p>
    
    <div class="gallery-container">
      <div class="gallery-gradient gallery-gradient-left"></div>
      <div class="gallery-gradient gallery-gradient-right"></div>
      <div class="gallery-content">
        <div class="gallery-track" id="gallery-track">
          {randomizedProjects.map((project, i) => (
            <div class="gallery-item" data-index={i}>
              <div class="project-card">
                <div class="project-header">
                  <div class="project-info">
                    <h3 class="project-name">{project.name}</h3>
                    <div class="project-meta">
                      <span class="project-age">{project.age} years old</span>
                      <span class="project-school">{project.school}</span>
                    </div>
                  </div>
                  <div class="project-image">
                    <img src={project.image} alt={`${project.name} profile picture`} />
                  </div>
                </div>
                <div class="project-award">
                  <span class="award-year">{project.year}</span>
                  <span class="award-type">{project.award}</span>
                </div>
                <div class="project-description">
                  <p>{project.description}</p>
                </div>
              </div>
            </div>
          ))}
        </div>
      </div>
      <div class="gallery-navigation">
        <button class="nav-btn nav-btn-prev" id="prev-btn" aria-label="Previous project">
          <svg width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
            <polyline points="15,18 9,12 15,6"></polyline>
          </svg>
        </button>
        <button class="nav-btn nav-btn-next" id="next-btn" aria-label="Next project">
          <svg width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
            <polyline points="9,18 15,12 9,6"></polyline>
          </svg>
        </button>
      </div>
    </div>
  </div>
</section>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    const galleryTrack = document.getElementById('gallery-track');
    if (!galleryTrack) return;

    const projects = galleryTrack.querySelectorAll('.gallery-item');
    const projectCount = projects.length;
    
    let isScreenSizeSm = window.innerWidth <= 640;
    let currentIndex = 0;
    let isDragging = false;
    let startX = 0;
    let currentX = 0;
    let startTransform = 0;

    // Calculate dimensions based on screen size
    const getDimensions = () => {
      const containerWidth = galleryTrack.parentElement.offsetWidth;
      const isSmallScreen = window.innerWidth <= 768; // Changed breakpoint to 768px
      
      if (isSmallScreen) {
        // For small screens, only show main card
        const mainCardWidth = containerWidth * 0.8;
        return { 
          cylinderWidth: containerWidth, 
          faceCount: 1, // Only show one card at a time
          mainCardWidth, 
          sideCardWidth: 0, 
          spacing: 0, 
          radius: 0,
          isSmallScreen: true
        };
      } else {
        // For larger screens, show 3D carousel
        const mainCardWidth = containerWidth * 0.4;
        const sideCardWidth = containerWidth * 0.3;
        const spacing = 20;
        const cylinderWidth = containerWidth * 1.8;
        const faceCount = projectCount;
        const radius = cylinderWidth / (2 * Math.PI);
        return { 
          cylinderWidth, 
          faceCount, 
          mainCardWidth, 
          sideCardWidth, 
          spacing, 
          radius,
          isSmallScreen: false
        };
      }
    };

    // Update gallery layout with smooth transitions
    const updateGallery = (animate = true) => {
      const { cylinderWidth, faceCount, mainCardWidth, sideCardWidth, spacing, radius, isSmallScreen } = getDimensions();
      
      galleryTrack.style.width = `${cylinderWidth}px`;
      
      projects.forEach((project, i) => {
        if (isSmallScreen) {
          // For small screens, only show the current card
          if (i === currentIndex) {
            project.style.display = 'flex';
            project.style.width = `${mainCardWidth}px`;
            project.style.transform = 'translateX(0)';
            project.style.opacity = '1';
            project.style.transition = animate ? 'all 0.5s cubic-bezier(0.4, 0, 0.2, 1)' : 'none';
          } else {
            project.style.display = 'none';
          }
        } else {
          // For larger screens, show 3D carousel with smooth transitions
          project.style.display = 'flex';
          
          // Calculate continuous rotation for seamless looping
          let rotation = (i * (360 / faceCount)) - (currentIndex * (360 / faceCount));
          
          // Normalize rotation to be between -180 and 180 for smoother transitions
          while (rotation > 180) rotation -= 360;
          while (rotation < -180) rotation += 360;
          
          // Determine card type based on rotation angle for continuous feel
          const isMainCard = Math.abs(rotation) < 15; // Main card is within 15 degrees of center
          const isSideCard = Math.abs(rotation) < 60; // Side cards are within 60 degrees
          const isVisible = Math.abs(rotation) < 90; // Only show cards within 90 degrees
          
          if (!isVisible) {
            project.style.display = 'none';
            return;
          }
          
          const cardWidth = isMainCard ? mainCardWidth : sideCardWidth;
          const translateZ = isMainCard ? radius : radius + spacing;
          const opacity = isMainCard ? 1 : (isSideCard ? 0.8 : 0.4);
          
          project.style.width = `${cardWidth}px`;
          project.style.transform = `rotateY(${rotation}deg) translateZ(${translateZ}px)`;
          project.style.opacity = opacity;
          project.style.transition = animate ? 'all 0.6s cubic-bezier(0.4, 0, 0.2, 1)' : 'none';
        }
      });
      
      // Update button states
      updateButtonStates();
    };

    // Handle drag start
    const handleDragStart = (e) => {
      isDragging = true;
      startX = e.type === 'mousedown' ? e.clientX : e.touches[0].clientX;
      startTransform = currentIndex;
      galleryTrack.style.cursor = 'grabbing';
    };

    // Handle drag move
    const handleDragMove = (e) => {
      if (!isDragging) return;
      
      const { isSmallScreen } = getDimensions();
      
      if (isSmallScreen) {
        // For small screens, don't show drag preview
        return;
      }
      
      currentX = e.type === 'mousemove' ? e.clientX : e.touches[0].clientX;
      const deltaX = currentX - startX;
      const sensitivity = 0.01;
      const rotationDelta = deltaX * sensitivity;
      
      const { faceCount, mainCardWidth, sideCardWidth, spacing, radius } = getDimensions();
      
      projects.forEach((project, i) => {
        let baseRotation = (i * (360 / faceCount)) - (startTransform * (360 / faceCount));
        let currentRotation = baseRotation + rotationDelta;
        
        // Normalize rotation for continuous flow
        while (currentRotation > 180) currentRotation -= 360;
        while (currentRotation < -180) currentRotation += 360;
        
        // Determine visibility and card type during drag
        const isVisible = Math.abs(currentRotation) < 90;
        const isMainCard = Math.abs(currentRotation) < 15;
        const isSideCard = Math.abs(currentRotation) < 60;
        
        if (!isVisible) {
          project.style.display = 'none';
          return;
        }
        
        const cardWidth = isMainCard ? mainCardWidth : sideCardWidth;
        const translateZ = isMainCard ? radius : radius + spacing;
        const opacity = isMainCard ? 1 : (isSideCard ? 0.8 : 0.4);
        
        project.style.display = 'flex';
        project.style.width = `${cardWidth}px`;
        project.style.transform = `rotateY(${currentRotation}deg) translateZ(${translateZ}px)`;
        project.style.opacity = opacity;
        project.style.transition = 'none'; // Disable transitions during drag
      });
    };

    // Handle drag end
    const handleDragEnd = () => {
      if (!isDragging) return;
      
      isDragging = false;
      galleryTrack.style.cursor = 'default'; // Changed from 'grab' to 'default'
      
      const deltaX = currentX - startX;
      const threshold = 50;
      
      if (Math.abs(deltaX) > threshold) {
        if (deltaX > 0) {
          currentIndex = currentIndex > 0 ? currentIndex - 1 : projectCount - 1;
        } else {
          currentIndex = currentIndex < projectCount - 1 ? currentIndex + 1 : 0;
        }
      }
      
      // Update with smooth animation
      updateGallery(true);
    };

    // COMMENTED OUT: Handle click/tap navigation - completely disabled card clicks
    // const handleCardClick = (e) => {
    //   const clickedCard = e.target.closest('.gallery-item');
    //   if (!clickedCard) return;
      
    //   const clickedIndex = parseInt(clickedCard.dataset.index);
      
    //   // COMMENTED OUT: Side card detection logic - completely disable side card clicks
    //   // Check if this is a side card (not the main card) - DISABLE SIDE CARD CLICKS
    //   // const { isSmallScreen } = getDimensions();
      
    //   // if (!isSmallScreen) {
    //   //   // For 3D carousel, check if it's a side card
    //   //   const { faceCount } = getDimensions();
    //   //   let rotation = (clickedIndex * (360 / faceCount)) - (currentIndex * (360 / faceCount));
      
    //   //   // Normalize rotation to be between -180 and 180
    //   //   while (rotation > 180) rotation -= 360;
    //   //   while (rotation < -180) rotation += 360;
      
    //   //   // Check if it's a side card (not the main card)
    //   //   const isMainCard = Math.abs(rotation) < 15; // Main card is within 15 degrees of center
    //   //   const isSideCard = Math.abs(rotation) < 60 && !isMainCard; // Side cards are within 60 degrees but not main
      
    //   //   if (isSideCard) {
    //   //     // SIDE CARD CLICKS DISABLED - do nothing, prevent navigation
    //   //     return;
    //   //   }
    //   // }
      
    //   // DISABLED: Only allow main card or small screen navigation
    //   // if (clickedIndex !== currentIndex) {
    //   //   currentIndex = clickedIndex;
    //   //   updateGallery();
    //   // }
    // };

    // COMMENTED OUT: Add event listeners - disabled all mouse and touch interactions
    // galleryTrack.addEventListener('mousedown', handleDragStart);
    // document.addEventListener('mousemove', handleDragMove);
    // document.addEventListener('mouseup', handleDragEnd);
    
    // galleryTrack.addEventListener('touchstart', handleDragStart, { passive: false });
    // document.addEventListener('touchmove', handleDragMove, { passive: false });
    // document.addEventListener('touchend', handleDragEnd);
    
    // COMMENTED OUT: Add click navigation - disabled card clicks
    // galleryTrack.addEventListener('click', handleCardClick);

    // Navigation button handlers
    const prevBtn = document.getElementById('prev-btn');
    const nextBtn = document.getElementById('next-btn');

    const handlePrevClick = () => {
      currentIndex = currentIndex > 0 ? currentIndex - 1 : projectCount - 1;
      updateGallery(true);
    };

    const handleNextClick = () => {
      currentIndex = currentIndex < projectCount - 1 ? currentIndex + 1 : 0;
      updateGallery(true);
    };

    if (prevBtn) prevBtn.addEventListener('click', handlePrevClick);
    if (nextBtn) nextBtn.addEventListener('click', handleNextClick);

    // Update button states
    const updateButtonStates = () => {
      if (prevBtn) {
        prevBtn.disabled = false;
        prevBtn.style.opacity = '1';
      }
      if (nextBtn) {
        nextBtn.disabled = false;
        nextBtn.style.opacity = '1';
      }
    };

    // Handle resize
    const handleResize = () => {
      isScreenSizeSm = window.innerWidth <= 768; // Updated breakpoint
      updateGallery();
    };
    
    window.addEventListener('resize', handleResize);

    // Initialize
    updateGallery();
    updateButtonStates();

    // Cleanup
    return () => {
      // COMMENTED OUT: Remove event listeners - disabled all mouse and touch interactions
      // galleryTrack.removeEventListener('mousedown', handleDragStart);
      // document.removeEventListener('mousemove', handleDragMove);
      // document.removeEventListener('mouseup', handleDragEnd);
      // galleryTrack.removeEventListener('touchstart', handleDragStart);
      // document.removeEventListener('touchmove', handleDragMove);
      // document.removeEventListener('touchend', handleDragEnd);
      window.removeEventListener('resize', handleResize);
    };
  });
</script>

<style>
  .past-projects-section {
    background: var(--bg);
    position: relative;
    overflow: hidden;
  }

  .gallery-container {
    position: relative;
    height: 600px;
    width: 100%;
    overflow: hidden;
  }

  .gallery-gradient {
    position: absolute;
    top: 0;
    height: 100%;
    width: 48px;
    z-index: 10;
    pointer-events: none;
  }

  .gallery-gradient-left {
    left: 0;
    background: linear-gradient(to left, rgba(255, 255, 255, 0) 0%, var(--bg) 100%);
  }

  .gallery-gradient-right {
    right: 0;
    background: linear-gradient(to right, rgba(255, 255, 255, 0) 0%, var(--bg) 100%);
  }

  .gallery-navigation {
    position: absolute;
    top: 50%;
    left: 0;
    right: 0;
    transform: translateY(-50%);
    display: flex;
    justify-content: space-between;
    padding: 0 1rem;
    pointer-events: none;
    z-index: 20;
  }

  .nav-btn {
    background: var(--bg);
    border: 1px solid var(--border);
    border-radius: 50%;
    width: 48px;
    height: 48px;
    display: flex;
    align-items: center;
    justify-content: center;
    cursor: pointer;
    transition: all 0.3s ease;
    pointer-events: auto;
    box-shadow: var(--shadow-sm);
  }

  .nav-btn:hover:not(:disabled) {
    background: var(--accent);
    color: white;
    border-color: var(--accent);
    transform: scale(1.1);
  }

  .nav-btn:disabled {
    opacity: 0.5;
    cursor: not-allowed;
  }

  .nav-btn svg {
    width: 20px;
    height: 20px;
  }

  .gallery-content {
    display: flex;
    height: 100%;
    align-items: center;
    justify-content: center;
    perspective: 1000px;
    transform-style: preserve-3d;
  }

  .gallery-track {
    display: flex;
    height: auto;
    min-height: 200px;
    justify-content: center;
    align-items: center;
    cursor: default; /* Changed from grab to default */
    transform-style: preserve-3d;
    width: 100%;
  }

  .gallery-item {
    position: absolute;
    display: flex;
    height: fit-content;
    align-items: center;
    justify-content: center;
    padding: 8%;
    backface-visibility: hidden;
  }

  .project-card {
    background: var(--bg);
    border: 1px solid var(--border);
    border-radius: 15px;
    padding: 1.25rem;
    width: 100%;
    box-shadow: var(--shadow-sm);
    transition: all 0.3s ease;
    height: 320px;
    display: flex;
    flex-direction: column;
  }

  /* Only apply hover effects to main card, not side cards */
  .gallery-item:hover .project-card {
    /* Hover effects disabled for side cards - only main card will have hover */
    /* transform: scale(1.05);
    box-shadow: var(--shadow-lg);
    border-color: var(--accent); */
  }

  .project-header {
    margin-bottom: 1rem;
    display: flex;
    justify-content: space-between;
    align-items: flex-start;
    gap: 1rem;
  }

  .project-info {
    flex: 1;
  }

  .project-name {
    color: var(--accent);
    font-size: 0.9rem;
    font-weight: 700;
    margin: 0 0 0.4rem 0;
  }

  .project-meta {
    display: flex;
    flex-direction: column;
    gap: 0.2rem;
  }

  .project-image {
    width: 60px;
    height: 60px;
    border-radius: 50%;
    overflow: hidden;
    flex-shrink: 0;
    border: 2px solid var(--border);
  }

  .project-image img {
    width: 100%;
    height: 100%;
    object-fit: cover;
  }

  .project-age,
  .project-school {
    color: var(--muted);
    font-size: 0.7rem;
  }

  .project-award {
    display: flex;
    align-items: center;
    gap: 0.4rem;
    margin-bottom: 0.8rem;
    padding: 0.4rem 0.8rem;
    background: var(--accent);
    color: white;
    border-radius: 15px;
    font-weight: 600;
    align-self: flex-start;
  }

  .award-year {
    font-size: 0.7rem;
  }

  .award-type {
    font-size: 0.6rem;
    opacity: 0.9;
  }

  .project-description {
    flex: 1;
    overflow-y: auto;
  }

  .project-description p {
    color: var(--text);
    line-height: 1.4;
    margin: 0;
    font-size: 0.7rem;
  }

  /* Mobile adjustments */
  @media (max-width: 768px) {
    .gallery-container {
      height: auto; /* Let container expand with content */
      min-height: 400px;
    }
    
    .gallery-content {
      perspective: none; /* Remove 3D perspective for mobile */
    }
    
    .gallery-track {
      cursor: default; /* Remove grab cursor on mobile */
    }
    
    .gallery-item {
      padding: 4%;
      position: relative !important; /* Override absolute positioning */
      transform: none !important; /* Override 3D transforms */
    }
    
    .project-card {
      height: auto; /* Let card expand to fit content */
      min-height: 320px; /* Minimum height for consistency */
      padding: 1.2rem;
      max-width: 100%;
    }
    
    .project-description {
      overflow-y: visible; /* Remove scroll on mobile */
    }
    
    .project-name {
      font-size: 0.9rem;
    }
    
    .project-description p {
      font-size: 1rem;
    }

    .project-image {
      width: 50px;
      height: 50px;
    }

    .nav-btn {
      width: 44px;
      height: 44px;
    }

    .nav-btn svg {
      width: 18px;
      height: 18px;
    }
  }

  @media (max-width: 640px) {
    .gallery-container {
      height: auto; /* Let container expand with content */
      min-height: 320px;
    }
    
    .project-card {
      height: auto; /* Let card expand to fit content */
      min-height: 260px; /* Minimum height for consistency */
      padding: 0.8rem;
    }

    .gallery-navigation {
      padding: 0 0.5rem;
    }

    .nav-btn {
      width: 36px;
      height: 36px;
    }

    .nav-btn svg {
      width: 14px;
      height: 14px;
    }

    .project-image {
      width: 45px;
      height: 45px;
    }
  }
</style>
