---
// ========================================
// COUNTDOWN COMPONENT
// ========================================
// Real-time countdown timer for TECS registration deadline
// 
// PURPOSE:
// - Creates urgency for student registration by showing time remaining
// - Updates every second with days, hours, minutes, and seconds
// - Features animated wave background for visual appeal
// - Automatically handles countdown expiration
//
// USAGE:
// - Used in main page to show registration deadline
// - Target date: October 23rd, 2025, 00:00 UTC+1
// - Includes accessibility features and responsive design
//
// FEATURES:
// - Real-time updates with performance optimization
// - Animated wave background using Waves component
// - Responsive grid layout for countdown display
// - Automatic cleanup and error handling

import Waves from "../components/Waves.astro";

export interface Props {
  className?: string; // Optional CSS class for styling customization
}

const { className = "" } = Astro.props;
---

<div class={`countdown ${className}`}>
  <!-- Animated Wave Background -->
  <Waves 
    lineColor="rgba(62, 168, 111, 0.2)"
    backgroundColor="transparent"
    waveSpeedX={0.008}
    waveSpeedY={0.003}
    waveAmpX={24}
    waveAmpY={12}
    xGap={12}
    yGap={28}
    friction={0.95}
    tension={0.003}
    maxCursorMove={80}
  />
  
  <div class="container">
    <h2>TECS Registration Closes In</h2>
    <br><br>
    <div class="countdown-grid">
      <div class="countdown-item">
        <div class="countdown-card">
          <div class="countdown-number" id="days">00</div>
        </div>
        <span class="countdown-label">DAYS</span>
      </div>
      <div class="countdown-item">
        <div class="countdown-card">
          <div class="countdown-number" id="hours">00</div>
        </div>
        <span class="countdown-label">HOURS</span>
      </div>
      <div class="countdown-item">
        <div class="countdown-card">
          <div class="countdown-number" id="minutes">00</div>
        </div>
        <span class="countdown-label">MINUTES</span>
      </div>
      <div class="countdown-item">
        <div class="countdown-card">
          <div class="countdown-number" id="seconds">00</div>
        </div>
        <span class="countdown-label">SECONDS</span>
      </div>
    </div>
    <p class="countdown-subtitle">Don't miss your chance to compete!</p>
  </div>
</div>

<script>
  // Store previous values to detect changes
  let previousValues = {
    days: '00',
    hours: '00',
    minutes: '00',
    seconds: '00'
  };

  function updateCountdown() {
    // Target date: October 26th, 2025, 23:59 UTC+1 (October 26th, 2025, 22:59 UTC)
    const targetDate = new Date('2025-10-26T22:59:00Z');
    const now = new Date();
    const difference = targetDate.getTime() - now.getTime();

    if (difference <= 0) {
      // Countdown has ended
      const daysEl = document.getElementById('days') as HTMLElement;
      const hoursEl = document.getElementById('hours') as HTMLElement;
      const minutesEl = document.getElementById('minutes') as HTMLElement;
      const secondsEl = document.getElementById('seconds') as HTMLElement;
      
      if (daysEl) daysEl.textContent = '00';
      if (hoursEl) hoursEl.textContent = '00';
      if (minutesEl) minutesEl.textContent = '00';
      if (secondsEl) secondsEl.textContent = '00';
      return;
    }

    const days = Math.floor(difference / (1000 * 60 * 60 * 24));
    const hours = Math.floor((difference % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));
    const minutes = Math.floor((difference % (1000 * 60 * 60)) / (1000 * 60));
    const seconds = Math.floor((difference % (1000 * 60)) / 1000);

    const daysEl = document.getElementById('days') as HTMLElement;
    const hoursEl = document.getElementById('hours') as HTMLElement;
    const minutesEl = document.getElementById('minutes') as HTMLElement;
    const secondsEl = document.getElementById('seconds') as HTMLElement;

    // Format numbers with leading zeros
    const newDays = days.toString().padStart(2, '0');
    const newHours = hours.toString().padStart(2, '0');
    const newMinutes = minutes.toString().padStart(2, '0');
    const newSeconds = seconds.toString().padStart(2, '0');

    // Update numbers if values changed
    if (daysEl && newDays !== previousValues.days) {
      daysEl.textContent = newDays;
      previousValues.days = newDays;
    }

    if (hoursEl && newHours !== previousValues.hours) {
      hoursEl.textContent = newHours;
      previousValues.hours = newHours;
    }

    if (minutesEl && newMinutes !== previousValues.minutes) {
      minutesEl.textContent = newMinutes;
      previousValues.minutes = newMinutes;
    }

    if (secondsEl && newSeconds !== previousValues.seconds) {
      secondsEl.textContent = newSeconds;
      previousValues.seconds = newSeconds;
    }
  }

  // Update countdown every second
  updateCountdown();
  setInterval(updateCountdown, 1000);
</script>

<style>
  /* Countdown Timer */
  .countdown {
    padding: 0 0 3.6rem 0;
    margin-top: 0;
    text-align: center;
    background: transparent;
    position: relative;
    overflow: hidden;
    z-index: 1;
  }

  .countdown .container {
    background: transparent;
    padding: 3.6rem 2rem;
    border-radius: 12px;
    position: relative;
    z-index: 2;
  }

  .countdown h2 {
    color: #3ea86f;
    margin-bottom: 1rem;
    font-size: 2.2rem;
    font-weight: 800;
    line-height: 1.2;
    text-transform: none;
    letter-spacing: normal;
  }

  .countdown .countdown-grid {
    display: grid !important;
    grid-template-columns: repeat(4, 1fr) !important;
    gap: 3rem; /* Increased spacing for desktop */
    max-width: 700px; /* Slightly wider to accommodate more spacing */
    margin: 0 auto 2rem;
    width: 100%;
    flex-wrap: nowrap !important;
    /* Force 4 columns on all screen sizes */
    grid-template-rows: 1fr !important;
    /* Override any potential conflicts from global styles */
    grid-auto-flow: row !important;
  }

  /* Additional specificity to override any global mobile grid styles */
  .countdown .countdown-grid.countdown-grid {
    grid-template-columns: repeat(4, 1fr) !important;
    grid-template-rows: 1fr !important;
  }

  .countdown .countdown-item {
    display: flex;
    flex-direction: column;
    align-items: center;
    gap: 0.75rem;
    flex: 1;
    min-width: 0;
    /* Ensure items don't wrap or stack */
    flex-shrink: 0;
    flex-grow: 1;
    flex-basis: 0;
  }

  .countdown-card {
    background: #ffffff;
    border: 1px solid #e5e7eb;
    border-top: 3px solid #3ea86f;
    border-radius: 8px;
    padding: 1.5rem 1rem;
    min-width: 0;
    width: 100%;
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.05);
    position: relative;
    overflow: hidden;
    min-height: 120px; 
    display: flex;
    flex-direction: column;
    justify-content: center;
  }

  .countdown-number {
    font-size: 3.5rem; 
    font-weight: 900;
    color: #1f2937;
    line-height: 1;
    text-align: center;
    font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Inter', Roboto, Arial, sans-serif;
    transition: opacity 0.2s ease;
    position: relative;
    display: inline-block;
  }

  .countdown-label {
    font-size: 1rem; 
    font-weight: 600;
    color: #475569;
    text-transform: uppercase;
    letter-spacing: 1px;
    margin-top: 0.25rem;
  }

  .countdown-subtitle {
    color: #475569;
    font-size: 1.2rem;
    margin: 0;
    font-weight: 500;
  }

  /* Responsive countdown */
  @media (max-width: 768px) {
    .countdown .countdown-grid {
      display: grid !important;
      grid-template-columns: repeat(4, 1fr) !important;
      grid-template-rows: 1fr !important;
      gap: 0.5rem;
      max-width: 100%;
      padding: 0 1rem;
      width: 100%;
      /* Override any potential conflicts */
      grid-auto-flow: row !important;
    }
    
    .countdown-number {
      font-size: 2.5rem;
    }
    
    .countdown-card {
      padding: 1.5rem 0.5rem;
      min-width: 0;
      width: 100%;
      min-height: 140px;
    }
    
    .countdown h2 {
      font-size: 1.8rem;
    }
    
    .countdown .container {
      padding: 2.5rem 1rem;
    }
  }

  @media (max-width: 480px) {
    .countdown .countdown-grid {
      display: grid !important;
      grid-template-columns: repeat(4, 1fr) !important;
      grid-template-rows: 1fr !important;
      gap: 0.25rem;
      padding: 0 0.25rem;
      width: 100%;
      /* Override any potential conflicts */
      grid-auto-flow: row !important;
    }
    
    .countdown-number {
      font-size: 1.8rem; 
    }
    
    .countdown-card {
      padding: 1rem 0.125rem; 
      min-width: 0;
      width: 100%;
      min-height: 120px; 
    }
    
    .countdown-label {
      font-size: 0.8rem; 
      letter-spacing: 0.5px;
    }
    
    .countdown h2 {
      font-size: 1.4rem;
    }
    
    .countdown .container {
      padding: 2rem 0.5rem;
    }
  }

  /* Extra small screens - ensure 4 cards stay in row */
  @media (max-width: 360px) {
    .countdown .countdown-grid {
      display: grid !important;
      grid-template-columns: repeat(4, 1fr) !important;
      grid-template-rows: 1fr !important;
      gap: 0.125rem;
      padding: 0 0.125rem;
      width: 100%;
      /* Override any potential conflicts */
      grid-auto-flow: row !important;
    }
    
    .countdown-number {
      font-size: 1.4rem; /* Increased from 1rem */
    }
    
    .countdown-card {
      padding: 0.75rem 0.0625rem; /* Increased padding for taller cards */
      min-width: 0;
      width: 100%;
      min-height: 100px; /* Taller cards on extra small screens */
    }
    
    .countdown-label {
      font-size: 0.7rem; /* Increased from 0.5rem */
      letter-spacing: 0.25px;
    }
    
    .countdown h2 {
      font-size: 1.2rem;
    }
    
    .countdown .container {
      padding: 1.5rem 0.25rem;
    }
  }
</style>