---
export interface Props {
  particleCount?: number;
  particleSpread?: number;
  speed?: number;
  particleColors?: string[];
  moveParticlesOnHover?: boolean;
  particleHoverFactor?: number;
  alphaParticles?: boolean;
  particleBaseSize?: number;
  sizeRandomness?: number;
  cameraDistance?: number;
  disableRotation?: boolean;
  className?: string;
}

const {
  particleCount = 100,
  particleSpread = 8,
  speed = 0.05,
  particleColors = ['#3ea86f', '#4fb87a', '#5fc885'],
  moveParticlesOnHover = false,
  particleHoverFactor = 0.5,
  alphaParticles = false,
  particleBaseSize = 4,
  sizeRandomness = 0.5,
  cameraDistance = 15,
  disableRotation = false,
  className = ''
} = Astro.props;
---

<div class={`particles-container ${className}`} id="particles-container">
  <div class="particles-wrapper">
    {Array.from({ length: particleCount }, (_, i) => {
      const color = particleColors[Math.floor(Math.random() * particleColors.length)];
      const size = particleBaseSize * (0.5 + Math.random() * sizeRandomness);
      const delay = Math.random() * 20;
      const duration = 15 + Math.random() * 10;
      const x = 15 + Math.random() * 70; // Keep particles within 15%-85% of container
      const y = 15 + Math.random() * 70; // Keep particles within 15%-85% of container
      
      return (
        <div 
          class="particle"
          style={`
            --particle-color: ${color};
            --particle-size: ${size}px;
            --particle-delay: ${delay}s;
            --particle-duration: ${duration}s;
            --particle-x: ${x}%;
            --particle-y: ${y}%;
            --particle-speed: ${speed};
          `}
        />
      );
    })}
  </div>
</div>

<script>
  const container = document.getElementById('particles-container');
  if (!container) {
    console.error('Particles: Could not find container element');
  } else {
    console.log('Particles: Initializing...');

    // Configuration
    const config = {
      particleCount: 100,
      particleBaseSize: 4,
      sizeRandomness: 0.5,
      speed: 0.05,
      particleColors: ['#3ea86f', '#4fb87a', '#5fc885']
    };

    // Get all particles
    const particles = container.querySelectorAll('.particle');
    console.log('Particles: Found', particles.length, 'particles');

    // Add floating animation to each particle
    particles.forEach((particle, index) => {
      const element = particle as HTMLElement;
      
      // Create unique animation for each particle
      const animationDuration = 15 + Math.random() * 10;
      const animationDelay = Math.random() * 20;
      const moveDistance = 15 + Math.random() * 20; // More movement
      const rotationAmount = 180 + Math.random() * 180;
      
      // Apply CSS animation
      element.style.animation = `float ${animationDuration}s ${animationDelay}s infinite linear`;
      element.style.setProperty('--move-distance', `${moveDistance}px`);
      element.style.setProperty('--rotation-amount', `${rotationAmount}deg`);
    });

    console.log('Particles: Animation applied to all particles');
  }
</script>

<style>
  .particles-container {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    pointer-events: none;
    z-index: 1;
    overflow: hidden;
    border-radius: 12px;
  }

  .particles-wrapper {
    position: relative;
    width: 100%;
    height: 100%;
    overflow: hidden;
    border-radius: 12px;
  }

  .particle {
    position: absolute;
    width: var(--particle-size);
    height: var(--particle-size);
    background: var(--particle-color);
    border-radius: 50%;
    left: var(--particle-x);
    top: var(--particle-y);
    opacity: 0.3;
    transition: transform 0.3s ease-out;
  }

  @keyframes float {
    0% {
      transform: translateY(0px) translateX(0px) rotate(0deg);
      opacity: 0.3;
    }
    25% {
      transform: translateY(calc(-1 * var(--move-distance, 20px) * 0.8)) translateX(calc(var(--move-distance, 20px) * 0.6)) rotate(calc(var(--rotation-amount, 180deg) * 0.25));
      opacity: 0.5;
    }
    50% {
      transform: translateY(calc(-1 * var(--move-distance, 20px) * 0.6)) translateX(calc(-1 * var(--move-distance, 20px) * 0.7)) rotate(calc(var(--rotation-amount, 180deg) * 0.5));
      opacity: 0.2;
    }
    75% {
      transform: translateY(calc(-1 * var(--move-distance, 20px) * 1.0)) translateX(calc(var(--move-distance, 20px) * 0.5)) rotate(calc(var(--rotation-amount, 180deg) * 0.75));
      opacity: 0.4;
    }
    100% {
      transform: translateY(0px) translateX(0px) rotate(var(--rotation-amount, 180deg));
      opacity: 0.3;
    }
  }

  /* Responsive adjustments */
  @media (max-width: 768px) {
    .particle {
      --particle-size: calc(var(--particle-size) * 0.7);
      opacity: 0.2;
    }
  }
</style>